name: Package Repository Setup

on:
  workflow_dispatch:
    inputs:
      setup_packages:
        description: 'Setup packages in repository'
        required: false
        default: 'true'
  push:
    branches: [ main ]
    paths:
      - 'docker/**'
      - '.github/workflows/package-setup.yml'

jobs:
  setup-packages:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      id-token: write
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ghcr.io/${{ github.repository_owner }}/ubuntu
          ghcr.io/${{ github.repository_owner }}/dotnet-sdk
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Ubuntu LTS
      uses: docker/build-push-action@v5
      with:
        context: ./docker/ubuntu
        file: ./docker/ubuntu/Dockerfile.lts
        push: true
        tags: ghcr.io/${{ github.repository_owner }}/ubuntu:lts
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build and push Ubuntu Stable
      uses: docker/build-push-action@v5
      with:
        context: ./docker/ubuntu
        file: ./docker/ubuntu/Dockerfile.stable
        push: true
        tags: ghcr.io/${{ github.repository_owner }}/ubuntu:stable
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build and push Ubuntu Preview
      uses: docker/build-push-action@v5
      with:
        context: ./docker/ubuntu
        file: ./docker/ubuntu/Dockerfile.preview
        push: true
        tags: ghcr.io/${{ github.repository_owner }}/ubuntu:preview
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build and push .NET SDK LTS
      uses: docker/build-push-action@v5
      with:
        context: ./docker/dotnet
        file: ./docker/dotnet/Dockerfile.lts
        push: true
        tags: ghcr.io/${{ github.repository_owner }}/dotnet-sdk:lts
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build and push .NET SDK Stable
      uses: docker/build-push-action@v5
      with:
        context: ./docker/dotnet
        file: ./docker/dotnet/Dockerfile.stable
        push: true
        tags: ghcr.io/${{ github.repository_owner }}/dotnet-sdk:stable
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build and push .NET SDK Preview
      uses: docker/build-push-action@v5
      with:
        context: ./docker/dotnet
        file: ./docker/dotnet/Dockerfile.preview
        push: true
        tags: ghcr.io/${{ github.repository_owner }}/dotnet-sdk:preview
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Make packages public
      run: |
        # Make all packages public in GHCR
        echo "🔓 Making all packages public..."
        
        # Get list of packages
        packages=$(gh api user/packages --jq '.[].name' 2>/dev/null || echo "")
        
        if [ -n "$packages" ]; then
          for package in $packages; do
            if [[ "$package" == *"ubuntu"* ]] || [[ "$package" == *"dotnet-sdk"* ]]; then
              echo "🔓 Making package $package public..."
              gh api --method PUT "user/packages/container/$package/visibility" \
                --field visibility="public" || echo "⚠️ Failed to make $package public"
            fi
          done
        else
          echo "ℹ️ No packages found or API access issue"
        fi
        
    - name: Update README with package information
      run: |
        cat > PACKAGES.md << 'EOF'
        # Docker Images Packages
        
        This repository contains the following Docker images:
        
        ## Ubuntu Images
        
        ### LTS (22.04)
        - **Image**: `ghcr.io/606/ubuntu:lts`
        - **Base**: Ubuntu 22.04 LTS
        - **Features**: Security updates, common tools, non-root user
        
        ### Stable (24.04)
        - **Image**: `ghcr.io/606/ubuntu:stable`
        - **Base**: Ubuntu 24.04
        - **Features**: Development tools, Python, Node.js
        
        ### Preview (24.10)
        - **Image**: `ghcr.io/606/ubuntu:preview`
        - **Base**: Ubuntu 24.10
        - **Features**: Cloud tools, Kubernetes, Terraform
        
        ## .NET SDK Images
        
        ### LTS (8.0)
        - **Image**: `ghcr.io/606/dotnet-sdk:lts`
        - **Base**: .NET 8.0 SDK
        - **Features**: Entity Framework, debugging tools
        
        ### Stable (9.0)
        - **Image**: `ghcr.io/606/dotnet-sdk:stable`
        - **Base**: .NET 9.0 SDK
        - **Features**: Latest stable features
        
        ### Preview (10.0)
        - **Image**: `ghcr.io/606/dotnet-sdk:preview`
        - **Base**: .NET 10.0 Preview SDK
        - **Features**: Cutting-edge features
        
        ## Usage
        
        ```bash
        # Pull Ubuntu LTS
        docker pull ghcr.io/606/ubuntu:lts
        
        # Pull .NET SDK LTS
        docker pull ghcr.io/606/dotnet-sdk:lts
        
        # Run Ubuntu container
        docker run -it ghcr.io/606/ubuntu:lts
        
        # Run .NET SDK container
        docker run -it ghcr.io/606/dotnet-sdk:lts
        ```
        
        ## Auto-Update
        
        These images are automatically updated via GitHub Actions workflows:
        - Daily checks for Ubuntu updates
        - Weekly checks for .NET SDK updates
        - Monthly forced updates of all images
        
        ## Security
        
        - Non-root users for production use
        - Regular security updates
        - Minimal attack surface
        - Health checks enabled
        
        ## Visibility
        
        **All packages are PUBLIC by default** - anyone can pull and use these images without authentication.
        EOF
        
    - name: Commit and push package documentation
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add PACKAGES.md
        git commit -m "📦 Add package documentation" || echo "No changes to commit"
        git push
